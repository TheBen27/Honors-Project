%% Build raw feature table from accelerometer data
function [features] = build_feature_table(...
    accel, sample_rate, smooth_time)

    % Use moving average to get static accel
    % Change time smoothing to frames, go for the closest odd number
    smooth_frames = 2 * round(smooth_time * sample_rate / 2) + 1;
    accel_unwrapped = reshape(accel, 1, size(accel,2), ...
        size(accel,1) * size(accel,3));
    static_accel_unwrapped = movmean(accel_unwrapped, smooth_frames, 3);
    static_accel = reshape(static_accel_unwrapped, ...
        size(accel,1), size(accel,2), size(accel,3));
    
    dynamic_accel = accel - static_accel;
    
    disp("Generating features...");
    basic_stats = feature_basic_stats(accel);
    means = feature_means_extreme(accel);
    odba = feature_odba(dynamic_accel);
    pitch_and_roll = feature_pitch_and_roll(accel, static_accel);

    [tail_distinct, tail_freq] = feature_tailbeat(accel, sample_rate, 0.8, 1.6);

    features = table(...
        means(:,1), ...
        means(:,2), ...
        means(:,3), ...
        odba,...
        tail_distinct(:, 1), ...
        tail_distinct(:, 2), ...
        tail_distinct(:, 3), ...
        tail_freq(:, 1), ...
        tail_freq(:, 2), ...
        tail_freq(:, 3) ...
    );
    features.Properties.VariableNames = {...
        'means_x', 'means_y', 'means_z', ...
        'odba', ...
        'distinctiveness_x', 'distinctiveness_y', 'distinctiveness_z', ...
        'frequency_x', 'frequency_y', 'frequency_z' ...
    };

    features = [features, basic_stats];
    features = [features, pitch_and_roll];

end